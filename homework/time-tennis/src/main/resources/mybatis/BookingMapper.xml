<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lazyman.timetennis.booking.BookingMapper">
    <resultMap id="BaseResultMap" type="com.lazyman.timetennis.booking.Booking">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="open_id" jdbcType="VARCHAR" property="openId"/>
        <result column="date" jdbcType="DATE" property="date"/>
        <result column="start" jdbcType="INTEGER" property="start"/>
        <result column="end" jdbcType="INTEGER" property="end"/>
        <result column="fee" jdbcType="INTEGER" property="fee"/>
        <result column="charged" jdbcType="BIT" property="charged"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <association property="owner" javaType="com.lazyman.timetennis.user.User">
            <id column="open_id" jdbcType="VARCHAR" property="openId"/>
            <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
            <result column="wx_nickname" jdbcType="VARCHAR" property="wxNickname"/>
            <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
            <result column="vip" jdbcType="BIT" property="vip"/>
        </association>
        <collection property="shareUsers" ofType="com.lazyman.timetennis.user.User">
            <id column="share_user_id" jdbcType="VARCHAR" property="openId"/>
            <result column="share_user_nickname" jdbcType="VARCHAR" property="nickname"/>
            <result column="share_user_wx_nickname" jdbcType="VARCHAR" property="wxNickname"/>
            <result column="share_user_avatar" jdbcType="VARCHAR" property="avatar"/>
            <result column="share_user_vip" jdbcType="BIT" property="vip"/>
        </collection>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from tt_booking
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.lazyman.timetennis.booking.Booking"
            useGeneratedKeys="true">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into tt_booking (open_id, date, start,end,fee)
        values (#{openId,jdbcType=VARCHAR}, #{date,jdbcType=DATE}, #{start,jdbcType=INTEGER},
        #{end,jdbcType=INTEGER},#{fee})
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.lazyman.timetennis.booking.Booking">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update tt_booking
        set
        date = #{date,jdbcType=DATE},
        start = #{start,jdbcType=INTEGER},
        end = #{end,jdbcType=INTEGER},
        charged = #{charged,jdbcType=BIT},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select id, open_id, date, start, end, charged, fee,update_time
        from tt_booking
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select id, open_id, date, start, end, charged, fee,update_time
        from tt_booking
    </select>

    <select id="queryByDate" resultMap="BaseResultMap">
        select id, open_id, date, start, end,fee, charged, update_time
        from tt_booking where date = #{date}
    </select>

    <select id="queryInRange" resultMap="BaseResultMap">
        select a.id, a.open_id, a.date, a.start, a.end,a.fee, a.charged, a.update_time,
       b.nickname,b.wx_nickname,b.avatar,b.vip,
       d.open_id as share_user_open_id,
       d.nickname as share_user_nickname,
       d.wx_nickname as share_user_wx_nickname,
       d.avatar as share_user_avatar,
       d.vip as share_user_vip
        from tt_booking a inner join tt_user b on a.open_id=b.open_id
                  left join booking_share c on a.id=c.booking_id
                  left join tt_user d on c.open_id=d.open_id
        where a.date &gt;=#{start} and a.date &lt;=#{end}
    </select>
    <select id="countBooked" resultType="java.lang.Integer">
        select ifnull(sum(end-start+1),0) from tt_booking where open_id=#{openId} and (date &gt; #{date} or (date=#{date} and start&gt;=#{start}))
    </select>
    <select id="query" resultMap="BaseResultMap">
        select a.id, a.open_id, a.date, a.start, a.end,a.fee, a.charged, a.update_time,
        b.nickname,b.wx_nickname,b.avatar,b.vip,
        d.open_id as share_user_open_id,
        d.nickname as share_user_nickname,
        d.wx_nickname as share_user_wx_nickname,
        d.avatar as share_user_avatar,
        d.vip as share_user_vip
        from tt_booking a inner join tt_user b on a.open_id=b.open_id
        left join booking_share c on a.id=c.booking_id
        left join tt_user d on c.open_id=d.open_id
        <where>
            <if test="openId!=null">a.open_id=#{openId}</if>
            <if test="startDate!=null">
                and a.date &gt;= #{startDate} and a.date &lt; #{endDate}
            </if>
        </where>
    order by a.update_time
    </select>

    <delete id="deleteBooking">
        delete from tt_booking
        <where>
            id = #{id}
            <if test="openId!=null">
                and open_id=#{openId}
            </if>
        </where>
    </delete>

    <insert id="addShare">
        insert into booking_share(booking_id, open_id) values (#{bookingId},#{openId})
    </insert>

    <delete id="deleteShare">
        delete from booking_share where booking_id=#{bookingId}
    </delete>
</mapper>