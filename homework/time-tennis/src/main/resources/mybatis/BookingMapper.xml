<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lazyman.timetennis.booking.BookingMapper">
    <resultMap id="BaseResultMap" type="com.lazyman.timetennis.booking.Booking">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="open_id" jdbcType="VARCHAR" property="openId"/>
        <result column="date" jdbcType="DATE" property="date"/>
        <result column="start" jdbcType="INTEGER" property="start"/>
        <result column="end" jdbcType="INTEGER" property="end"/>
        <result column="fee" jdbcType="INTEGER" property="fee"/>
        <result column="charged" jdbcType="BIT" property="charged"/>
        <result column="pay_no" jdbcType="VARCHAR" property="payNo"/>
        <result column="pay_type" jdbcType="VARCHAR" property="payType"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <association property="owner" javaType="com.lazyman.timetennis.user.User">
            <id column="open_id" jdbcType="VARCHAR" property="openId"/>
            <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
            <result column="wx_nickname" jdbcType="VARCHAR" property="wxNickname"/>
            <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        </association>
        <association property="arena" javaType="com.lazyman.timetennis.arena.Arena">
            <id column="arena_id" jdbcType="INTEGER" property="id"/>
            <result column="arena_name" jdbcType="VARCHAR" property="name"/>
        </association>
        <association property="court" javaType="com.lazyman.timetennis.arena.Court">
            <id column="court_id" jdbcType="INTEGER" property="id"/>
            <result column="court_name" jdbcType="VARCHAR" property="name"/>
        </association>
        <collection property="shareUsers" ofType="com.lazyman.timetennis.booking.Share">
            <id column="share_user_open_id" jdbcType="VARCHAR" property="openId"/>
            <result column="share_user_nickname" jdbcType="VARCHAR" property="nickname"/>
            <result column="share_user_wx_nickname" jdbcType="VARCHAR" property="wxNickname"/>
            <result column="share_user_avatar" jdbcType="VARCHAR" property="avatar"/>
            <result column="share_pay_no" jdbcType="VARCHAR" property="payNo"/>
        </collection>
    </resultMap>

    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.lazyman.timetennis.booking.Booking"
            useGeneratedKeys="true">
        insert into tt_booking (open_id,
                                date,
                                arena_id,
                                court_id,
                                start, end,
                                fee, pay_no,
                                pay_type,
                                charged,
                                status)
        values (#{openId},
                #{date},
                #{arena.id},
                #{court.id},
                #{start},
                #{end},
                #{fee},
                #{payNo},
                #{payType},
                #{charged},
                #{status})
    </insert>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select a.id,
               a.open_id,
               a.date,
               a.arena_id,
               a.court_id,
               a.start,
               a.end,
               a.charged,
               a.fee,
               a.update_time,
               a.pay_no,
               a.pay_type,
               b.name as court_name
        from tt_booking a
                 inner join court b on a.court_id = b.id
        where a.id = #{id,jdbcType=INTEGER}
    </select>

    <select id="queryInRange" resultMap="BaseResultMap">
        select a.id,
               a.open_id,
               a.date,
               a.court_id,
               a.start,
               a.end,
               a.fee,
               a.status,
               a.pay_type,
               a.pay_no,
               a.charged,
               a.update_time,
               b.nickname,
               b.wx_nickname,
               b.avatar,
               d.open_id     as share_user_open_id,
               d.nickname    as share_user_nickname,
               d.wx_nickname as share_user_wx_nickname,
               d.avatar      as share_user_avatar
        from tt_booking a
                 inner join tt_user b on a.open_id = b.open_id
                 left join booking_share c on a.id = c.booking_id
                 left join tt_user d on c.open_id = d.open_id
        where a.arena_id = #{arenaId}
          and a.date &gt;= #{start}
          and a.date &lt;= #{end}
          and (a.status = 'ok' or a.status = 'lock')
    </select>

    <select id="countBooked" resultType="java.lang.Integer">
        select ifnull(sum(end - start + 1), 0)
        from tt_booking
        where open_id = #{openId}
          and arena_id = #{arenaId}
          and status = 'ok'
          and (date &gt; #{date} or (date = #{date} and start &gt;= #{start}))
    </select>

    <select id="queryInDateRange" resultMap="BaseResultMap">
        select a.id, a.open_id, a.date, a.arena_id,a.court_id, a.start, a.end, a.fee, a.pay_no,a.pay_type,
        a.charged,a.update_time,
        b.nickname,b.wx_nickname,b.avatar,
        c.pay_no as share_pay_no,
        e.name as court_name,
        d.open_id as share_user_open_id,
        d.nickname as share_user_nickname,
        d.wx_nickname as share_user_wx_nickname,
        d.avatar as share_user_avatar
        from tt_booking a inner join tt_user b on a.open_id=b.open_id
        inner join court e on a.court_id=e.id
        left join booking_share c on a.id=c.booking_id
        left join tt_user d on c.open_id=d.open_id
        <where>
            a.date &gt;= #{start} and a.date &lt; #{end}
            <if test="arenaId != null">
                and a.arena_id=#{arenaId}
            </if>
            <if test="charged != null">
                and a.charged = #{charged}
            </if>
            <if test="status != null">
                and a.status=#{status}
            </if>
            <if test="payType != null">
                and a.pay_type=#{payType}
            </if>
        </where>
    </select>

    <delete id="deleteBooking">
        delete from tt_booking
        where id = #{id}
        <if test="openId!=null">
            and open_id=#{openId}
        </if>
    </delete>

    <insert id="addShare">
        insert into booking_share(booking_id, open_id, pay_no)
        values (#{bookingId}, #{openId}, #{payNo})
    </insert>

    <delete id="deleteShare">
        delete
        from booking_share
        where booking_id = #{bookingId}
    </delete>

    <select id="userBookings" resultMap="BaseResultMap">
        select a.id, a.open_id, a.date, a.start, a.end,a.fee, a.charged, a.update_time,a.pay_type,a.pay_no,
        d.open_id as share_user_open_id,
        d.nickname as share_user_nickname,
        d.wx_nickname as share_user_wx_nickname,
        d.avatar as share_user_avatar,
        e.name as arena_name,
        f.name as court_name
        from (select id, open_id, date,arena_id,court_id, start, end,fee, charged, update_time,pay_type,pay_no from
        tt_booking
        <where>
            open_id=#{openId} and status='ok'
            <if test="history">and date &lt; #{now}</if>
            <if test="!history">and date &gt;= #{now}</if>
        </where>
        <if test="history">order by date desc</if>
        <if test="!history">order by date asc</if>
        limit 20) a
        left join booking_share c on a.id=c.booking_id
        left join tt_user d on c.open_id=d.open_id
        left join arena e on a.arena_id=e.id
        left join court f on a.court_id=f.id
    </select>

    <update id="updateBookingStatus">
        update tt_booking
        set status=#{status}
        where pay_no = #{tradeNo}
    </update>
    <update id="setCharged">
        update tt_booking
        set charged= true,
            pay_no=#{payNo}
        where id = #{id}
    </update>

    <update id="setSharePayNo">
        update booking_share
        set pay_no=#{payNo}
        where open_id = #{openId}
          and booking_id = #{bookingId}
    </update>
    <select id="byPayNo" resultMap="BaseResultMap">
        select a.date,
               a.status,
               a.open_id,
               a.arena_id,
               a.court_id,
               a.start,
               a.charged,
               a.end,
               a.update_time,
               a.pay_no,
               b.name as court_name,
               c.name as arena_name
        from tt_booking a
                 inner join court b on a.court_id = b.id
                 inner join arena c on a.arena_id = c.id
        where a.pay_no = #{payNo}
        order by a.date
    </select>
</mapper>